.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.14
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "FTDId2xx 3"
.TH FTDId2xx 3 "2009-12-17" "perl v5.8.5" "User Contributed Perl Documentation"
.SH "NAME"
FTDId2xx \- Perl extension for interface to FTDI d2xx library (tested with version 0.4.16 linux) 
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 5
\&  use FTDId2xx;
\&  my $FTD = FTDIId2xx->new(0); # open device with id 0
\&  unless( $FTD->FT_Write(\e@data,@data,$written) == FT_OK ) {
\&        print "Write error";
\&  }
.Ve
.PP
.Vb 1
\&  # not needed due to destrucor: $FTD->FT_Close();
.Ve
.PP
.Vb 1
\&  OR
.Ve
.PP
.Vb 7
\&  use FTDId2xx;
\&  my $handle;
\&  FTDId2xx::FT_Open($handle,0); # open device with id 0
\&  unless( FTDId2xx::FT_Write($handle,\e@data,@data,$written) == FT_OK ) {
\&        print "Write error";
\&  }
\&  FTDId2xx::FT_Close($handle);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is an interface to the d2xx library from Future Technology Devices International Limited (\s-1FTDI\s0). 
The basic idea for this interface comes from the Win32::FTDI:FTD2XX perl module. It was started as a port from the Windows
module to linux but it became a completly new implementation. This modules does not contain any code from the Win32::FTDI:FTD2XX module.
Thanks for the source code from Scott K MacPherson as a starting point.
.PP
The mainly all standard functions of the D2XX library excluding the FT_W32_* functions are implemented. The functions can be used as in the D2XX documentation 
or in a object oriented way. 
.Sh "\s-1STATUS\s0"
.IX Subsection "STATUS"
This is a pre-alpha version. Only small tests have been done by using a test script included in this package and an \s-1FT2232L\s0 \s-1IC\s0. Testers are welcome.
.Sh "\s-1EXPORT\s0"
.IX Subsection "EXPORT"
\&\s-1FT_OK\s0 is the only default export. Other exportable symbols are:   
\&\f(CW\*(C`FT_INVALID_HANDLE
  FT_DEVICE_NOT_FOUND
  FT_DEVICE_NOT_OPENED
  FT_IO_ERROR
  FT_INSUFFICIENT_RESOURCES
  FT_INVALID_PARAMETER
  FT_INVALID_BAUD_RATE
  FT_DEVICE_NOT_OPENED_FOR_ERASE
  FT_DEVICE_NOT_OPENED_FOR_WRITE
  FT_FAILED_TO_WRITE_DEVICE
  FT_EEPROM_READ_FAILED
  FT_EEPROM_WRITE_FAILED
  FT_EEPROM_ERASE_FAILED
  FT_EEPROM_NOT_PRESENT
  FT_EEPROM_NOT_PROGRAMMED
  FT_INVALID_ARGS
  FT_NOT_SUPPORTED
  FT_OTHER_ERROR
  FT_OPEN_BY_SERIAL_NUMBER 
  FT_OPEN_BY_DESCRIPTION
  FT_OPEN_BY_LOCATION
  FT_LIST_NUMBER_ONLY
  FT_LIST_BY_INDEX
  FT_LIST_ALL
  FT_LIST_MASK
  FT_BAUD_300
  FT_BAUD_600
  FT_BAUD_1200
  FT_BAUD_2400
  FT_BAUD_4800
  FT_BAUD_9600
  FT_BAUD_14400
  FT_BAUD_19200
  FT_BAUD_38400
  FT_BAUD_57600
  FT_BAUD_115200
  FT_BAUD_230400
  FT_BAUD_460800
  FT_BAUD_921600
  FT_BITS_8
  FT_BITS_7
  FT_BITS_6
  FT_BITS_5
  FT_STOP_BITS_1
  FT_STOP_BITS_1_5
  FT_STOP_BITS_2
  FT_PARITY_NONE
  FT_PARITY_ODD
  FT_PARITY_EVEN
  FT_PARITY_MARK
  FT_PARITY_SPACE
  FT_FLOW_NONE
  FT_FLOW_RTS_CTS
  FT_FLOW_DTR_DSR
  FT_FLOW_XON_XOFF
  FT_PURGE_RX
  FT_PURGE_TX
  FT_EVENT_RXCHAR	
  FT_EVENT_MODEM_STATUS
  FT_EVENT_LINE_STATUS
  FT_DEFAULT_RX_TIMEOUT
  FT_DEFAULT_TX_TIMEOUT
  FT_DEVICE_BM
  FT_DEVICE_AM
  FT_DEVICE_100AX
  FT_DEVICE_UNKNOWN
  FT_DEVICE_2232C
  FT_DEVICE_232R
  FT_DEVICE_2232H
  FT_DEVICE_4232H
  FT_BITMODE_RESET
  FT_BITMODE_ASYNC
  FT_BITMODE_MPSSE
  FT_BITMODE_SYNC
  FT_BITMODE_MCUHOST
  FT_BITMODE_FASTOPTO
  FT_BITMODE_CBUS
  FT_BITMODE_SINGLE245
  CBUS_TXDEN  
  CBUS_PWRON  
  CBUS_RXLED  
  CBUS_TXLED  
  CBUS_TXRXLED 
  CBUS_SLEEP  
  CBUS_CLK48 
  CBUS_CLK24 
  CBUS_CLK12 
  CBUS_CLK6 
  CBUS_IOMODE  
  CBUS_BITBANG_WR  
  CBUS_BITBANG_RD 
\&\*(C'\fR
.SH "FUNCTIONS and METHODS"
.IX Header "FUNCTIONS and METHODS"
The module provides a new constructor which connects a ftdi handle with the module by using bless.
Therefore all FT_functions can be called as a method if a handle is the first parameter.
.PP
The following list describes only the differences to the original implementation by \s-1FTDI\s0. All functions, except \fInew()\fR returns the status of the operation. Parameters marked by * will be changed by the function.
.RE
.ie n .IP """New"""
.el .IP "\f(CWNew\fR"
.IX Item "New"
Parameters: deviceID [mode]
Returns: Object Reference of the Object FTDId2xx
Purpose: Open a \s-1FTDI\s0 device and return the handle as a object reference. This function behaves like FT_Open with one parameter and like FT_OpenEx with two parameters.
.RE
.ie n .IP """FT_SetVIDPID"""
.el .IP "\f(CWFT_SetVIDPID\fR"
.IX Item "FT_SetVIDPID"
Parameters: Skalar, Skalar
.RE
.ie n .IP """FT_GetVIDPID"""
.el .IP "\f(CWFT_GetVIDPID\fR"
.IX Item "FT_GetVIDPID"
Parameters: Skalar*, Skalar* 
.RE
.ie n .IP """FT_CreateDeviceInfoList"""
.el .IP "\f(CWFT_CreateDeviceInfoList\fR"
.IX Item "FT_CreateDeviceInfoList"
Parameters: Skalar*
.RE
.ie n .IP """FT_GetDeviceInfoDetail"""
.el .IP "\f(CWFT_GetDeviceInfoDetail\fR"
.IX Item "FT_GetDeviceInfoDetail"
Parameters: Skalar, Skalar*, Skalar*, Skalar*, Skalar*, Skalar*, Skalar*, Reference* 
.RE
.ie n .IP """FT_Open"""
.el .IP "\f(CWFT_Open\fR"
.IX Item "FT_Open"
Parameters: Skalar, Reference*
.RE
.ie n .IP """FT_OpenEx"""
.el .IP "\f(CWFT_OpenEx\fR"
.IX Item "FT_OpenEx"
Parameters: Skalar, Skalar, Reference*
.RE
.ie n .IP """FT_Close"""
.el .IP "\f(CWFT_Close\fR"
.IX Item "FT_Close"
Parameters: Reference
.RE
.ie n .IP """FT_Read"""
.el .IP "\f(CWFT_Read\fR"
.IX Item "FT_Read"
Parameters: Reference, ReferenceToArray*, Skalar, Skalar*
.RE
.ie n .IP """FT_Write"""
.el .IP "\f(CWFT_Write\fR"
.IX Item "FT_Write"
Parameters: Reference, ReferenceToArray, Skalar, Skalar*
.RE
.ie n .IP """FT_SetBaudRate"""
.el .IP "\f(CWFT_SetBaudRate\fR"
.IX Item "FT_SetBaudRate"
Parameters: Reference, Skalar
.RE
.ie n .IP """FT_SetDivisor"""
.el .IP "\f(CWFT_SetDivisor\fR"
.IX Item "FT_SetDivisor"
Parameters: Reference, Skalar
.RE
.ie n .IP """FT_SetDataCharacteristics"""
.el .IP "\f(CWFT_SetDataCharacteristics\fR"
.IX Item "FT_SetDataCharacteristics"
Parameters: Reference, Skalar, Skalar, Skalar
.RE
.ie n .IP """FT_SetTimeouts"""
.el .IP "\f(CWFT_SetTimeouts\fR"
.IX Item "FT_SetTimeouts"
Parameters: Reference, Skalar, Skalar
.RE
.ie n .IP """FT_SetFlowControl"""
.el .IP "\f(CWFT_SetFlowControl\fR"
.IX Item "FT_SetFlowControl"
Parameters: Reference, Skalar, Skalar, Skalar
.RE
.ie n .IP """FT_SetDtr"""
.el .IP "\f(CWFT_SetDtr\fR"
.IX Item "FT_SetDtr"
Parameters: Reference 
.RE
.ie n .IP """FT_ClrDtr"""
.el .IP "\f(CWFT_ClrDtr\fR"
.IX Item "FT_ClrDtr"
Parameters: Reference 
.RE
.ie n .IP """FT_SetRts"""
.el .IP "\f(CWFT_SetRts\fR"
.IX Item "FT_SetRts"
Parameters: Reference
.RE
.ie n .IP """FT_ClrRts"""
.el .IP "\f(CWFT_ClrRts\fR"
.IX Item "FT_ClrRts"
Parameters: Reference 
.RE
.ie n .IP """FT_GetModemStatus"""
.el .IP "\f(CWFT_GetModemStatus\fR"
.IX Item "FT_GetModemStatus"
Parameters: Reference, Skalar*
.RE
.ie n .IP """FT_GetQueueStatus"""
.el .IP "\f(CWFT_GetQueueStatus\fR"
.IX Item "FT_GetQueueStatus"
Parameters: Reference, Skalar*
.RE
.ie n .IP """FT_GetDeviceInfo"""
.el .IP "\f(CWFT_GetDeviceInfo\fR"
.IX Item "FT_GetDeviceInfo"
Parameters: Reference, Skalar*, Skalar*, Skalar*, Skalar*, Skalar*, Skalar
.RE
.ie n .IP """FT_GetDriverVersion"""
.el .IP "\f(CWFT_GetDriverVersion\fR"
.IX Item "FT_GetDriverVersion"
Parameters: Reference, Skalar*
Not supported under Linux and \s-1OS\s0 X
.RE
.ie n .IP """FT_GetLibraryVersion"""
.el .IP "\f(CWFT_GetLibraryVersion\fR"
.IX Item "FT_GetLibraryVersion"
Parameters: Skalar*
Not supported under Linux and \s-1OS\s0 X
.RE
.ie n .IP """FT_GetStatus"""
.el .IP "\f(CWFT_GetStatus\fR"
.IX Item "FT_GetStatus"
Parameters: Reference, Skalar*, Skalar*, Skalar*
.RE
.ie n .IP """FT_SetEventNotification"""
.el .IP "\f(CWFT_SetEventNotification\fR"
.IX Item "FT_SetEventNotification"
Currently not implemented in this module.
.RE
.ie n .IP """FT_SetChars"""
.el .IP "\f(CWFT_SetChars\fR"
.IX Item "FT_SetChars"
Parameters: Reference, Skalar, Skalar, Skalar, Skalar
.RE
.ie n .IP """FT_SetBreakOn"""
.el .IP "\f(CWFT_SetBreakOn\fR"
.IX Item "FT_SetBreakOn"
Parameters: Reference
.RE
.ie n .IP """FT_SetBreakOff"""
.el .IP "\f(CWFT_SetBreakOff\fR"
.IX Item "FT_SetBreakOff"
Parameters: Reference 
.RE
.ie n .IP """FT_Purge"""
.el .IP "\f(CWFT_Purge\fR"
.IX Item "FT_Purge"
Parameters: Reference, Skalar
.RE
.ie n .IP """FT_ResetDevice"""
.el .IP "\f(CWFT_ResetDevice\fR"
.IX Item "FT_ResetDevice"
Parameters: Reference 
.RE
.ie n .IP """FT_ResetPort"""
.el .IP "\f(CWFT_ResetPort\fR"
.IX Item "FT_ResetPort"
Parameters: Reference 
Only under Windows 2000 and higher supported.
.RE
.ie n .IP """FT_CyclePort"""
.el .IP "\f(CWFT_CyclePort\fR"
.IX Item "FT_CyclePort"
Parameters: Reference 
Only under Windows 2000 and higher supported.
.RE
.ie n .IP """FT_SetResetPipeRetryCount"""
.el .IP "\f(CWFT_SetResetPipeRetryCount\fR"
.IX Item "FT_SetResetPipeRetryCount"
Parameters: Reference, Skalar
Only under Windows 2000 and higher supported.
.RE
.ie n .IP """FT_StopInTask"""
.el .IP "\f(CWFT_StopInTask\fR"
.IX Item "FT_StopInTask"
Parameters: Reference
.RE
.ie n .IP """FT_RestartInTask"""
.el .IP "\f(CWFT_RestartInTask\fR"
.IX Item "FT_RestartInTask"
Parameters: Reference
.RE
.ie n .IP """FT_SetDeadmanTimeout"""
.el .IP "\f(CWFT_SetDeadmanTimeout\fR"
.IX Item "FT_SetDeadmanTimeout"
Parameters: Reference, Skalar
.RE
.ie n .IP """FT_SetWaitMask"""
.el .IP "\f(CWFT_SetWaitMask\fR"
.IX Item "FT_SetWaitMask"
Parameters: Reference
Not supported under Linux and \s-1OS\s0 X
.RE
.ie n .IP """FT_WaitOnMask"""
.el .IP "\f(CWFT_WaitOnMask\fR"
.IX Item "FT_WaitOnMask"
Parameters: Reference
Not supported under Linux and \s-1OS\s0 X
.RE
.ie n .IP """FT_ReadEE"""
.el .IP "\f(CWFT_ReadEE\fR"
.IX Item "FT_ReadEE"
Parameters: Reference, Skalar, Skalar*
.RE
.ie n .IP """FT_WriteEE"""
.el .IP "\f(CWFT_WriteEE\fR"
.IX Item "FT_WriteEE"
Parameters: Reference, Skalar, Skalar 
.RE
.ie n .IP """FT_EraseEE"""
.el .IP "\f(CWFT_EraseEE\fR"
.IX Item "FT_EraseEE"
Parameters: Reference
.RE
.ie n .IP """FT_EE_Read"""
.el .IP "\f(CWFT_EE_Read\fR"
.IX Item "FT_EE_Read"
Not implemented so far. See FT_EE_ReadToArray
.RE
.ie n .IP """FT_EE_ReadToArray"""
.el .IP "\f(CWFT_EE_ReadToArray\fR"
.IX Item "FT_EE_ReadToArray"
Parameters: Reference, ReferenceToArray*
This functions read the \s-1EEPROM\s0 and saves every byte into an arrray. The conversion from array to
hash will be implemented later.
.RE
.ie n .IP """FT_EE_Program"""
.el .IP "\f(CWFT_EE_Program\fR"
.IX Item "FT_EE_Program"
Not implemented so far. See FT_EE_ProgramByArray.
.RE
.ie n .IP """FT_EE_ProgramByArray"""
.el .IP "\f(CWFT_EE_ProgramByArray\fR"
.IX Item "FT_EE_ProgramByArray"
Parameters: Reference, ReferenceToArray
This function writes to \s-1EEPROM\s0. The conversion from hash to array will be added later.
.RE
.ie n .IP """FT_EE_UASize"""
.el .IP "\f(CWFT_EE_UASize\fR"
.IX Item "FT_EE_UASize"
Parameters: Reference, Skalar* 
.RE
.ie n .IP """FT_EE_UARead"""
.el .IP "\f(CWFT_EE_UARead\fR"
.IX Item "FT_EE_UARead"
Parameters: Reference, ReferenceToArray*, Skalar, Skalar*
.RE
.ie n .IP """FT_EE_UAWrite"""
.el .IP "\f(CWFT_EE_UAWrite\fR"
.IX Item "FT_EE_UAWrite"
Parameters: Reference, ReferenceToArray, Skalar,
.RE
.ie n .IP """FT_SetLatencyTimer"""
.el .IP "\f(CWFT_SetLatencyTimer\fR"
.IX Item "FT_SetLatencyTimer"
Parameters: Reference, Skalar
.RE
.ie n .IP """FT_GetLatencyTimer"""
.el .IP "\f(CWFT_GetLatencyTimer\fR"
.IX Item "FT_GetLatencyTimer"
Parameters: Reference, Skalar*
.RE
.ie n .IP """FT_SetBitMode"""
.el .IP "\f(CWFT_SetBitMode\fR"
.IX Item "FT_SetBitMode"
Parameters: Reference, Skalar, Skalar
.RE
.ie n .IP """FT_GetBitMode"""
.el .IP "\f(CWFT_GetBitMode\fR"
.IX Item "FT_GetBitMode"
Parameters: Reference, Skalar*
.RE
.ie n .IP """FT_SetUSBParameters"""
.el .IP "\f(CWFT_SetUSBParameters\fR"
.IX Item "FT_SetUSBParameters"
Parameters: Reference, Skalar, Skalar
.SH "DEPENDENCIES"
.IX Header "DEPENDENCIES"
The \s-1FTDI/FTD2XX\s0 Drivers, at least \s-1CDM\s0 2.04.16 (only tested with this version under linux), must be installed in conjunction
with this module for it to be functional. This package does not contain the ftd2xx.h header file. Please download it from www.ftdichip.com
.SH "BUGS and THINGS TO DO"
.IX Header "BUGS and THINGS TO DO"
Please report bugs to me at my email address below.
.PP
See the \s-1BUGS\s0 file in the distribution for known issues and their status.
.PP
\&\fBThings to Do\fR
.PP
1) Test, test, test it
.PP
2) Complete the functions list
.PP
3) Find some one to port it to windows (should be simple) \- I'm looking for someone
to do this. A small test with nmake, Visual \*(C+ and ActivePerl failed but should run with small
modifications.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
The list of functions showns only the difference to the \s-1FTDI\s0 D2XX Programmer's Guide. Use it as a reference.
.SH "AUTHOR"
.IX Header "AUTHOR"
Matthias Voelker, <m.matze@gmx.de>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2009 by Matthias Voelker
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.8.8 or,
at your option, any later version of Perl 5 you may have available.
